.. -*- mode:rst; coding:utf-8 -*-

.. _quick-start:

Quick Start
===========

There might be some terms in this quick start that you don't fully
understand, so you may want to have a look into
:ref:`design-principles` section.

The compliance tool requires, at least, one directory with the
fetchers and checks. In order to learn how to use it, let's use a
demo folder with a simple set of fetchers and checks. You can find it
at `doc/demo-checks`::

  $ cd doc/demo-checks
  $ mkvirtual env ** #TODO CHECK mkvirtual **
  $ . ./env/bin/activate
  $ pip install -r requirements.txt

A normal execution is broken down in 2 steps:

* Run the fetchers::

    $ compliance --fetch .

  This executes all the fetchers located at ``demo/fetchers``
  and generates a git repository locally at ``/$TMPDIR/compliance``.

* Run the checks::

    $ compliance --check 'demo.accreditation1,demo.accreditation2' .

  This executes the checks located at ``demo/checks``, creates the reports,
  executes notifiers (you can see the messages in the output), and generates a
  file called ``check_results.json`` with detailed information about the
  execution.  The file is put into the evidence locker by default.

Advanced Topics
---------------


Fetchers
~~~~~~~~

You might want to push the evidences generated by ``--fetch`` into a
remote git repository. For that, you can use ``--evidence`` and ``-C
setup.json``. This ``setup.json`` contains a fake URL of the repo, you
can edit it to match the URL you want. However, you have to provide
GitHub Enterprise credentials. By default, you should use
``~/.credentials`` (or use ``--creds-path`` to point somewhere else)::

  [github_enterprise]
  token=XXX

Once you have set it up, you can run the fetchers in ``no-push``
mode::

  $ compliance --fetch --evidence no-push -C setup.json .

The compliance tool will ``pull`` the repository to
``/tmp/compliance`` (only if it does not exist already), then run all
the fetchers that need to be run (i.e. those whose evidence TTL
has expired) but it will **not** push anything. This is handy for
testing the current state of the evidences of your remote repository.

If you really want to push the evidences generated::

  $ compliance --fetch --evidence full-remote -C setup.json .

Checks
~~~~~~

You can also use ``-C setup.json`` to configure the check run and
tweak some components like notifiers. For example, you can use the
``slack`` notifier as following::

  $ compliance --check demo.accreditation2 --notify slack -C setup.json .

This will only run ``demo.accreditation2`` accreditation. Note that in
``setup.json`` how to notify people/channels based on
accreditations. Also note that you will need to add a ``webhook`` into
the credentials::

  [slack]
  webhook=XXX

Slack webhooks cannot be used for posting messages into private
channels. If you need this, we recommend to use a Slack app token
instead::

  [slack]
  token=XXX


controls.json
-------------

The mapping between accreditations and checks happens at
``controls.json``. New checks must be included here in order to be
collected by the compliance tool. Note that this is not the same case
as in fetchers, where all of them are executed.


A few recommendations
---------------------

* Use the example project you have used above as a template:

  * ``demo`` should be replaced by the name of your unit or
    organization.

  * Put your ``fetchers`` in a separate directory from
    ``checks``. Technically, there is no requirement regarding how to
    organise fetchers and checks, but it is recommended to keep them
    separated. As you add more fetchers and checks you can create
    subdirectories.

  * For your report templates, use
    ``demo/templates/reports``. Remember that they should have the
    same path as the report evidences.

* When debugging, always use the safest options for compliance
  tool. This will try to prevent incidental slack notifications or
  commits to your git evidence collector.
